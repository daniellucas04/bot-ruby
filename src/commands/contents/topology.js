const { SlashCommandBuilder } = require("@discordjs/builders");
const { MessageEmbed, MessageButton } = require('discord.js');
const paginationEmbed = require('discordjs-button-pagination');

module.exports = {
    data: new SlashCommandBuilder()
    .setName('topologia')
    .setDescription('Vamos entender sobre as topologias que existem em um ambiente LAN!'),

    async execute(interaction){
        const topologyEmbed1 = new MessageEmbed()
        .setColor('NOT_QUITE_BLACK')
        .setTitle('> üìò LAN (Local Area Network) Topologias')
        .setDescription('Em refer√™ncia √† rede, quando nos referimos ao termo **"topologia"**, estamos nos referindo ao **design** ou **apar√™ncia** da rede em quest√£o, ou seja, como organizar fisicamente os dispositivos. Vamos conhecer **tr√™s topologias** neste t√≥pico e discutir **vantagens** e **desvantagens**.\
                         Na internet voc√™ pode encontrar *diversos* tipos de topologia.')
        .setTimestamp();

        const topologyEmbed2 = new MessageEmbed()
        .setColor('NOT_QUITE_BLACK')
        .setTitle('> üìò Topologia em estrela')
        .setDescription('A principal premissa de uma **topologia em estrela** √© que os dispositivos sejam conectados **individualmente** por meio de um dispositivo de rede central, como um **switch ou hub**. Essa topologia √© a mais encontrada atualmente devido √† sua **confiabilidade e escalabilidade** - apesar do **custo**.\n\n\
                         Qualquer informa√ß√£o enviada a um dispositivo nesta topologia √© enviada atrav√©s do **dispositivo central ao qual se conecta**. Vamos explorar algumas dessas **vantagens e desvantagens**.')
        .addFields(
            {
                name: 'Vantagens',
                value: '~ Essa topologia √© muito mais escal√°vel por natureza, ou seja, √© **f√°cil adicionar dispositivos √† medida que a demanda aumenta**.\n\
                        ~ Geralmente os dispositivos centralizados s√£o **robustos**.'
            },
            {
                name: 'Desvantagens',
                value: '~ Quanto maior a rede mais **manuten√ß√£o √© necess√°ria**. Essa maior depend√™ncia da manuten√ß√£o tamb√©m pode **dificultar muito a solu√ß√£o de falhas**.\n\
                        ~ Se o hardware centralizado que conecta os dispositivos **falhar**, esses dispositivos **n√£o poder√£o mais enviar ou receber dados**.'
            }
        )
        .setImage('https://i.imgur.com/ClA0iaa.png')
        .setTimestamp();

        const topologyEmbed3 = new MessageEmbed()
        .setColor('NOT_QUITE_BLACK')
        .setTitle('> üìò Topologia em barramento')
        .setDescription('Este tipo de conex√£o depende de uma √∫nica conex√£o que √© conhecida como cabo de **backbone**. Esse tipo de topologia √© semelhante √† **folha de uma √°rvore** no sentido de que os dispositivos (folhas) se originam de onde os ramos est√£o neste cabo.\n\
                         Como todos os dados destinados a cada dispositivo **trafegam pelo mesmo cabo**, ele rapidamente fica propenso a se tornar **lento e afunilado** se os dispositivos dentro da topologia estiverem solicitando dados **simultaneamente**.\n\
                         Esse gargalo tamb√©m resulta em uma **solu√ß√£o de problemas muito dif√≠cil**, pois se torna **dif√≠cil identificar** qual dispositivo est√° apresentando problemas com **todos os dados viajando pela mesma rota**. Esta topologia foi utilizada nos primeiros projetos de redes locais e atualmente n√£o √© mais utilizada.\n')
        .addFields(
            {
                name: 'Vantagens',
                value: '~ F√°cil de configurar.\n\
                        ~ Econ√¥mico.'
            },
            {
                name: 'Desvantagens',
                value: '~ Se torna lento rapidamente.\n\
                        ~ Dificuldade em resolver problemas.\n\
                        ~ Se o cabo backbone quebrar, os dispositivos n√£o poder√£o mais receber ou transmitir dados pelo barramento.'
            }
        )
        .setImage('https://i.imgur.com/olruKXK.png')
        .setTimestamp();

        const topologyEmbed4 = new MessageEmbed()
        .setColor('NOT_QUITE_BLACK')
        .setTitle('> üìò Topologia em anel')
        .setDescription('Dispositivos como computadores s√£o conectados **diretamente uns aos outros para formar um loop**, o que significa que h√° **pouco cabeamento necess√°rio e menos depend√™ncia de hardware dedicado**, como em uma topologia em estrela.\n\
                         Uma topologia em anel funciona **enviando dados pelo loop at√© chegar ao dispositivo de destino**, usando outros **dispositivos ao longo do loop para encaminhar os dados**.\n\
                         Curiosamente, um dispositivo s√≥ enviar√° dados recebidos de outro dispositivo nessa topologia se **n√£o tiver nenhum para enviar a si mesmo**.\n\
                         Se o dispositivo tiver dados para enviar, ele enviar√° seus **pr√≥prios dados** antes de enviar dados de **outro dispositivo**.')
        .addFields(
            {
                name: 'Vantagens',
                value: '~ F√°cil de solucionar problemas.\n\
                        ~ Menos propensas a gargalos.'
            },
            {
                name: 'Desvantagens',
                value: '~ N√£o √© eficiente para os dados trafegarem.\n\
                        ~ A falha no cabo ou algum dispositivo resulta na quebra de toda a rede.'
            }
        )
        .setImage('https://i.imgur.com/mAlrmFb.png')
        .setTimestamp();

        const topologyEmbed5 = new MessageEmbed()
        .setColor('NOT_QUITE_BLACK')
        .setTitle('> üìò O que √© um Switch?')
        .setDescription('Os switches s√£o **dispositivos dedicados** em uma rede projetados para agregar **v√°rios outros dispositivos, como computadores, impressoras ou qualquer outro dispositivo com capacidade de rede usando o ethernet**.\n\
                         Esses v√°rios dispositivos se **conectam √† porta de um switch**.\n\
                         Os switches geralmente s√£o encontrados em **redes maiores**, como empresas, escolas ou redes de tamanho semelhante, onde h√° **muitos dispositivos para se conectar √† rede**.\n\
                         Os switches podem conectar um grande n√∫mero de dispositivos com portas de 4, 8, 16, 24, 32 e 64 para conectar os dispositivos.')
        .setTimestamp();
        
        const topologyEmbed6 = new MessageEmbed()
        .setColor('NOT_QUITE_BLACK')
        .setTitle('> üìò O que √© um Switch? - 2')
        .setDescription('Os switches s√£o bem mais **eficientes** do que seus equivalentes menores (hubs/repetidores).\n\
                         Os switches mant√™m o controle de qual dispositivo est√° conectado a qual porta. Dessa forma, quando eles recebem um pacote, em vez de **repetir esse pacote para todas as portas** como um hub faria, ele apenas o envia para o destino pretendido, **reduzindo o tr√°fego da rede**.')
        .setTimestamp();

        const topologyEmbed7 = new MessageEmbed()
        .setColor('NOT_QUITE_BLACK')
        .setTitle('> üìò O que √© um Roteador?')
        .setDescription('√â o trabalho de um roteador conectar redes e passar dados entre elas. Ele faz isso usando **roteamento**.\n\
                         Roteamento √© o r√≥tulo dado ao processo de **dados que trafegam pelas redes**. O roteamento envolve a **cria√ß√£o de um caminho entre as redes** para que esses dados possam ser entregues com **sucesso**.')
        .setFields(
            {
                name: 'Refer√™ncias',
                value: 'TryHackMe. Dispon√≠vel em <https://tryhackme.com/room/introtolan> Acesso em 16/06/2022\nTANENBAUM, Andrew S. Redes de Computadores. Rio de Janeiro: Elsevier, 2003.\n'
            }
        )
        .setTimestamp();

        const button1 = new MessageButton()
            .setCustomId('previousbtn')
            .setLabel('P√°gina Anterior')
            .setStyle('DANGER');

        const button2 = new MessageButton()
            .setCustomId('nextbtn')
            .setLabel('Pr√≥xima p√°gina')
            .setStyle('SUCCESS');

        const pages = [ topologyEmbed1, topologyEmbed2, topologyEmbed3, topologyEmbed4, topologyEmbed5, topologyEmbed6, topologyEmbed7 ];
        const buttons = [button1, button2];
        const time = 1000 * 3600;

        paginationEmbed(interaction, pages, buttons, time);
    }
}